{"version":3,"sources":["dark.tsx","lmc.tsx","components/CodePanel.tsx","components/MailBoxValueDialogue.tsx","components/MailBox.tsx","components/MiscValueDialogue.tsx","components/PostOffice.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","palette","type","primary","main","dark","contrastText","secondary","error","background","paper","default","text","hint","disabled","zIndex","appBar","overrides","MuiAppBar","colorPrimary","backgroundColor","color","colorSecondary","colorDefault","MuiDrawer","width","MuiListItemIcon","root","noArgMnemonics","INP","OUT","OTC","HLT","COB","DAT","oneArgMnemonics","ADD","SUB","STA","LDA","BRA","BRZ","BRP","allMnemonics","tabStop","splitWithTail","str","delim","count","parts","split","tail","slice","join","result","push","CodePanel","props","state","errorText","code","autoFormat","autoFormatCode","codeChanged","bind","changeAutoFormatState","assemble","console","log","lines","errors","labels","labelsUsed","n_lines","i","length","orig_line","line","comment","trim","endsWith","replace","label","mnemonic","argument","toUpperCase","a","b","includes","test","formattedLine","this","Object","entries","setAccumulator","setPC","mailBoxes","instructions","setMailBoxes","event","newState","format","target","value","setState","checked","Card","style","margin","CardContent","paddingBottom","display","flexDirection","alignContent","TextField","multiline","id","variant","rows","fullWidth","helperText","className","onChange","FormControlLabel","marginRight","control","Switch","CardActions","Button","onClick","React","Component","MailBoxValueDialogue","handleClose","setOpen","newValue","useState","setError","detailedErrorText","setDetailedErrorText","Dialog","open","onClose","aria-labelledby","DialogTitle","index","DialogContent","DialogContentText","autoFocus","valueAsNumber","isNaN","DialogActions","setMailBox","MailBox","dialogue","noDialogue","assert","undefined","setDialogueOpen","active","CardActionArea","padding","fontFamily","hideSign","Math","abs","toString","padStart","pad","MiscValueDialogue","name","setValue","PostOffice","accOpen","setAccOpen","newAcc","setNewAcc","justifyContent","Array","map","_","y","x","mailBoxValues","pc","accumulator","trunc","inputActive","onKeyPress","ev","key","doneAwaiting","preventDefault","step","running","setRunning","instant","setInstant","App","initialMailBoxes","window","setRunningImpl","acc","setAcc","output","setOutput","awaitingInput","setAwaitingInput","setInstantImpl","instruction","opc","arg","String","fromCharCode","clearInterval","timeoutID","setInterval","ThemeProvider","CssBaseline","alignItems","marginTop","mailbox","newMailBoxes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c90e1a6.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\n// Dark theme\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#bb86fc',\n            dark: '#C191FC',\n            // dark: '#3700b3',\n            contrastText: '#000000',\n        },\n        secondary: {\n            main: '#03dac6',\n            dark: '#03dac6',\n            contrastText: '#000000',\n        },\n        error: {\n            main: '#cf6679',\n        },\n        background: {\n            paper: '#1e1e1e',\n            default: '#121212'\n        },\n        text: {\n            primary: 'rgba(255,255,255,87%)',\n            secondary: 'rgba(255,255,255,60%)',\n            hint: 'rgba(255,255,255,60%)',\n            disabled: 'rgba(255,255,255,38%)',\n        }\n    },\n    zIndex: {\n        appBar: 1250\n    },\n});\n\ntheme.overrides = {\n    MuiAppBar: {\n        colorPrimary: {\n            backgroundColor: theme.palette.background.paper,\n            color: theme.palette.primary.main,\n        },\n        colorSecondary: {\n            backgroundColor: theme.palette.background.paper,\n            color: theme.palette.secondary.main,\n        },\n        colorDefault: {\n            backgroundColor: theme.palette.background.paper,\n            color: theme.palette.text.primary,\n        }\n    },\n    MuiDrawer: {\n        paper: {\n            width: 240\n        }\n    },\n    MuiListItemIcon: {\n        root: {\n            color: theme.palette.text.primary,\n        }\n    }\n};\n\nexport default theme;","const noArgMnemonics = { INP: 901, OUT: 902, OTC: 922, HLT: 0, COB: 0, DAT: 0 };\nconst oneArgMnemonics = { ADD: 100, SUB: 200, STA: 300, LDA: 500, BRA: 600, BRZ: 700, BRP: 800, DAT: 0 };\nconst allMnemonics = [\n    'INP',\n    'OUT',\n    'OTC',\n    'HLT',\n    'COB',\n    'ADD',\n    'SUB',\n    'STA',\n    'LDA',\n    'BRA',\n    'BRZ',\n    'BRP',\n    'DAT',\n];\nexport { noArgMnemonics, oneArgMnemonics, allMnemonics };\n","import { Button, Card, CardActions, CardContent, FormControlLabel, Switch, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { allMnemonics, noArgMnemonics, oneArgMnemonics } from '../lmc';\nimport './CodePanel.scss';\n\nconst tabStop = '        ';\n\ninterface IDictionary<TValue> {\n    [key: string]: TValue;\n}\n\ninterface CodePanelProps {\n    setMailBoxes: (values: number[]) => void,\n    setAccumulator: (value: number) => void,\n    setPC: (value: number) => void,\n    autoFormatCode?: boolean,\n    disabled: boolean,\n}\ninterface CodePanelState {\n    code: string,\n    errorText: string,\n    autoFormat: boolean,\n}\nfunction splitWithTail(str: string, delim: string, count: number) {\n    var parts = str.split(delim);\n    var tail = parts.slice(count).join(delim);\n    var result = parts.slice(0, count);\n    result.push(tail);\n    return result;\n}\n\nclass CodePanel extends React.Component<CodePanelProps, CodePanelState> {\n    state: CodePanelState\n    errorText: string\n    code: string\n    constructor(props: CodePanelProps) {\n        super(props);\n        this.errorText = '';\n        this.state = { code: this.code = '', errorText: '', autoFormat: props.autoFormatCode ?? true };\n        this.codeChanged = this.codeChanged.bind(this);\n        this.changeAutoFormatState = this.changeAutoFormatState.bind(this);\n        this.assemble = this.assemble.bind(this);\n    }\n    format(code: string): string {\n        console.log('Formatting code:');\n        console.log(code);\n        var lines = code.split('\\n');\n        let errors = [];\n        let labels: IDictionary<number> = {};\n        let labelsUsed: IDictionary<string> = {};\n        let n_lines = 0;\n        for (var i = 0; i < lines.length; i++) {\n            let orig_line = lines[i];\n            let [line, comment] = splitWithTail(orig_line, '//', 2);\n            comment = comment.trim();\n            if (comment || orig_line.endsWith('//')) {\n                comment = '// ' + comment;\n            }\n            line = line.replace(/ +/g, ' ').trim();\n            let parts = line.split(' ');\n            let label = '', mnemonic = '', argument = '';\n            switch (parts.length) {\n                case 0:\n                    break;\n                case 1:\n                    mnemonic = parts[0];\n                    if (mnemonic === '') {\n                        break;\n                    }\n                    if (!(mnemonic.toUpperCase() in noArgMnemonics)) {\n                        if (mnemonic.toUpperCase() in oneArgMnemonics) {\n                            errors.push(`Line ${i + 1}: '${mnemonic.toUpperCase()}' requires a mailbox`);\n                        } else {\n                            errors.push(`Line ${i + 1}: invalid mnemonic '${mnemonic.toUpperCase()}'`);\n                            [label, mnemonic] = [mnemonic, ''];\n                        }\n                    }\n                    break;\n                case 2:\n                    let [a, b] = parts;\n                    if (allMnemonics.includes(a.toUpperCase())) {\n                        [mnemonic, argument] = [a, b];\n                        if (!(mnemonic.toUpperCase() in oneArgMnemonics)) {\n                            errors.push(`Line ${i + 1}: '${mnemonic.toUpperCase()}' does not take a mailbox`);\n                        }\n                    } else {\n                        [label, mnemonic] = [a, b];\n                        if (!allMnemonics.includes(mnemonic.toUpperCase())) {\n                            errors.push(`Line ${i + 1}: invalid mnemonic '${mnemonic.toUpperCase()}'`);\n                        } else if (!(mnemonic.toUpperCase() in noArgMnemonics)) {\n                            errors.push(`Line ${i + 1}: '${mnemonic.toUpperCase()}' requires a mailbox`);\n                        }\n                    }\n                    break;\n                case 3:\n                    [label, mnemonic, argument] = parts;\n                    if (!allMnemonics.includes(mnemonic.toUpperCase())) {\n                        errors.push(`Line ${i + 1}: invalid mnemonic '${mnemonic.toUpperCase()}'`);\n                    } else if (!(mnemonic.toUpperCase() in oneArgMnemonics)) {\n                        errors.push(`Line ${i + 1}: '${mnemonic.toUpperCase()}' does not take a mailbox`);\n                    }\n                    break;\n                default:\n                    [label, mnemonic, argument] = parts.slice(0, 3);\n                    comment = '// ' + parts.slice(3).join(' ');\n                    errors.push(`Line ${i + 1}: Too many parts`)\n            }\n            if (label) {\n                labels[label] = i;\n            }\n            if (argument && !/^\\d+$/.test(argument)) {\n                labelsUsed[i + 1] = argument;\n            }\n            let formattedLine = label;\n            if (mnemonic || orig_line.endsWith(' ')) {\n                formattedLine += ' ' + tabStop.slice(label.length + 1) + mnemonic.toUpperCase();\n            }\n            if (mnemonic) {\n                if (mnemonic.toUpperCase() in oneArgMnemonics) {\n                    formattedLine += ' ' + tabStop.slice(mnemonic.length + 1) + argument;\n                }\n                n_lines++;\n            }\n            if (comment || orig_line.endsWith('//')) {\n                if (label || mnemonic || argument) {\n                    formattedLine += '  '\n                }\n                formattedLine += comment;\n            }\n\n            if (this.state.autoFormat) {\n                lines[i] = formattedLine;\n            }\n        }\n        for (let [line, label] of Object.entries(labelsUsed)) {\n            if (!(label in labels)) {\n                errors.push(`Line ${line}: Undefined label ${label}`);\n            }\n        }\n        if (n_lines > 100) {\n            errors.push(\n                `Too many instructions: Got ${n_lines} but only have 100 mailboxes`\n            );\n        }\n        this.errorText = errors[0] || ''; // .join('\\n');\n        if (errors.length > 1) {\n            this.errorText = `${errors.length} errors: ` + this.errorText;\n        }\n        console.log('Errors:', this.errorText);\n        return lines.join('\\n');\n    }\n    assemble(code: string) {\n        if (this.errorText) {\n            return;\n        }\n        this.props.setAccumulator(0);\n        this.props.setPC(0);\n        let mailBoxes = [];\n        let instructions = [];\n        let labels: IDictionary<number> = {};\n        for (let line of code.split('\\n')) {\n            [line] = line.split('//', 1);\n            line += ' ';\n            line = line.replace(/ +/g, ' ');\n            if (line === ' ') {\n                continue;\n            }\n            let [label, mnemonic, argument] = line.split(' ')\n            if (label) {\n                labels[label] = instructions.length;\n            }\n            instructions.push([mnemonic, argument]);\n        }\n        for (let [mnemonic, argument] of instructions) {\n            if (/^\\d+$/.test(argument)) {\n                mailBoxes.push(\n                    oneArgMnemonics[\n                    mnemonic as keyof typeof oneArgMnemonics\n                    ]\n                    + (+argument)\n                );\n            } else if (argument) {\n                mailBoxes.push(\n                    oneArgMnemonics[\n                    mnemonic as keyof typeof oneArgMnemonics\n                    ]\n                    + labels[argument]\n                );\n            } else {\n                mailBoxes.push(\n                    noArgMnemonics[\n                    mnemonic as keyof typeof noArgMnemonics\n                    ]\n                );\n            }\n        }\n        for (let i = mailBoxes.length; i < 100; i++) {\n            mailBoxes.push(0);\n        }\n        this.props.setMailBoxes(mailBoxes);\n    }\n    codeChanged(event: React.ChangeEvent<HTMLInputElement>) {\n        var newState = {\n            code: this.code = this.format(event.target.value),\n            errorText: '',\n            autoFormat: this.state.autoFormat\n        };\n        newState.errorText = this.errorText;\n        if (!this.errorText) {\n            this.assemble(newState.code);\n        }\n        this.setState(newState);\n    }\n    changeAutoFormatState(event: React.ChangeEvent<HTMLInputElement>) {\n        let code = event.target.checked ? this.format(this.state.code) : this.state.code;\n        this.setState({\n            code: code,\n            errorText: this.errorText,\n            autoFormat: event.target.checked,\n        })\n    }\n    render() {\n        return <Card style={{ margin: 8 }}>\n            <CardContent style={{\n                paddingBottom: 16,\n                display: 'flex',\n                flexDirection: 'column',\n                alignContent: 'center',\n            }}>\n                <TextField\n                    multiline\n                    id=\"code\"\n                    variant=\"filled\"\n                    label=\"Code\"\n                    rows={24}\n                    fullWidth={true}\n                    value={this.state.code}\n                    error={this.state.errorText !== ''}\n                    helperText={this.state.errorText}\n                    className=\"code-panel\"\n                    onChange={this.codeChanged}\n                    disabled={this.props.disabled}\n                />\n                <FormControlLabel\n                    style={{ marginRight: 0 }}\n                    control={<Switch\n                        color=\"primary\"\n                        checked={this.state.autoFormat}\n                        onChange={this.changeAutoFormatState}\n                    />}\n                    label=\"Automatically Format Code\"\n                />\n            </CardContent>\n            <CardActions>\n                <Button\n                    onClick={() => this.assemble(this.code)}\n                >Reassemble</Button>\n            </CardActions>\n        </Card>;\n    }\n}\n\nexport default CodePanel;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\n\ninterface MailBoxValueDialogueProps {\n    index: number,\n    setMailBox: (mailbox: number, value: number) => void,\n    open: boolean,\n    setOpen: (open: boolean) => void,\n}\n\nfunction MailBoxValueDialogue(props: MailBoxValueDialogueProps) {\n    const handleClose = () => {\n        props.setOpen(false);\n    };\n    let newValue = 0;\n    const [error, setError] = React.useState(false);\n    const [detailedErrorText, setDetailedErrorText] = React.useState('');\n    function validate(event: React.ChangeEvent<HTMLInputElement>) {\n        newValue = event.target.valueAsNumber;\n        if (isNaN(newValue) || newValue % 1 !== 0) {\n            setDetailedErrorText(\"Must be an integer\");\n            return;\n        } else {\n            setDetailedErrorText('');\n        }\n        if (newValue < -999 || newValue > 999) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n    }\n\n    return <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle>Set value of mailbox {props.index + 1}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Enter the new value of this mailbox\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"name\"\n                label=\"New value\"\n                variant=\"filled\"\n                type=\"number\"\n                error={detailedErrorText ? true : error}\n                helperText={\n                    detailedErrorText ? detailedErrorText : \"Must be an integer from -999 to 999\"\n                }\n                onChange={validate}\n                fullWidth\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button\n                onClick={\n                    () => {\n                        props.setMailBox(props.index, newValue);\n                        handleClose();\n                    }\n                }\n                disabled={error}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Update\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}\nexport default MailBoxValueDialogue;","import { Card, CardActionArea, CardContent } from '@material-ui/core';\nimport assert from 'assert';\nimport React from 'react';\nimport theme from '../dark';\nimport MailBoxValueDialogue from './MailBoxValueDialogue';\n\ninterface MailBoxProps {\n    value: number,\n    index?: number,\n    pad?: number,\n    hideSign?: boolean,\n    active?: boolean,\n    disabled?: boolean,\n    dialogue?: React.ReactNode,\n    noDialogue?: boolean,\n    setDialogueOpen?: (value: boolean) => void,\n    setMailBox?: (index: number, value: number) => void,\n}\n\nfunction MailBox(props: MailBoxProps) {\n    const [open, setOpen] = React.useState(false);\n    let dialogue = props.dialogue;\n    if (!props.dialogue && !props.noDialogue) {\n        assert(props.index !== undefined);\n        assert(props.setMailBox !== undefined);\n        dialogue = <MailBoxValueDialogue\n            open={open}\n            setOpen={setOpen}\n            setMailBox={props.setMailBox}\n            index={props.index}\n        />\n    }\n    let setDialogueOpen = props.setDialogueOpen ?? setOpen;\n    return <>\n        <Card\n            style={\n                props.active\n                    ? {\n                        margin: 4,\n                        color: theme.palette.primary.contrastText,\n                        backgroundColor: theme.palette.primary.main,\n                    }\n                    : {\n                        margin: 4\n                    }\n            }\n            variant=\"outlined\"\n        >\n            <CardActionArea onClick={() => setDialogueOpen(true)}>\n                <CardContent style={{\n                    padding: 8,\n                    fontFamily: '\"Source Code Pro\", \"Courier New\", Courier, monospace'\n                }}>\n                    {\n                        (props.hideSign ? '' : (props.value < 0 ? '-' : '+'))\n                        + Math.abs(props.value)\n                            .toString()\n                            .padStart(\n                                (props.pad ?? 3),\n                                '0'\n                            )\n                    }\n                </CardContent>\n            </CardActionArea>\n        </Card>\n        {props.noDialogue ? null : dialogue}\n    </>;\n}\n\nexport default MailBox;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\n\ninterface MiscValueDialogueProps {\n    setValue: (value: number) => void,\n    open: boolean,\n    setOpen: (open: boolean) => void,\n    name: string,\n}\n\nfunction MiscValueDialogue(props: MiscValueDialogueProps) {\n    const handleClose = () => {\n        props.setOpen(false);\n    };\n    let newValue = 0;\n    const [error, setError] = React.useState(false);\n    const [detailedErrorText, setDetailedErrorText] = React.useState('');\n    function validate(event: React.ChangeEvent<HTMLInputElement>) {\n        newValue = event.target.valueAsNumber;\n        if (isNaN(newValue) || newValue % 1 !== 0) {\n            setDetailedErrorText(\"Must be an integer\");\n            return;\n        } else {\n            setDetailedErrorText('');\n        }\n        if (newValue < -999 || newValue > 999) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n    }\n\n    return <Dialog open={props.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle>Set value of {props.name}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Enter the new value for the {props.name}\n            </DialogContentText>\n            <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"name\"\n                label=\"New value\"\n                variant=\"filled\"\n                type=\"number\"\n                error={detailedErrorText ? true : error}\n                helperText={\n                    detailedErrorText ? detailedErrorText : \"Must be an integer from -999 to 999\"\n                }\n                onChange={validate}\n                fullWidth\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button\n                onClick={\n                    () => {\n                        props.setValue(newValue);\n                        handleClose();\n                    }\n                }\n                disabled={error}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Update\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}\nexport default MiscValueDialogue;","import { Button, Card, CardActions, FormControlLabel, Switch, TextField } from '@material-ui/core';\nimport React from 'react';\nimport MailBox from './MailBox';\nimport MiscValueDialogue from './MiscValueDialogue';\nimport './PostOffice.scss';\n\ninterface PostOfficeProps {\n    mailBoxValues: number[],\n    inputActive: boolean,\n    accumulator: number,\n    setAccumulator: (value: number) => void,\n    setPC: (value: number) => void,\n    pc: number,\n    running: boolean,\n    setRunning: (value: boolean) => void,\n    instant: boolean,\n    setInstant: (value: boolean) => void,\n    setMailBox: (mailbox: number, value: number) => void,\n    step: () => void,\n    doneAwaiting: () => void,\n}\n\nfunction PostOffice(props: PostOfficeProps) {\n    const [accOpen, setAccOpen] = React.useState(false);\n    const [error, setError] = React.useState(false);\n    const [detailedErrorText, setDetailedErrorText] = React.useState('');\n    const [newAcc, setNewAcc] = React.useState(0);\n    return <Card style={{\n        width: 'fit-content',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        margin: 8,\n        padding: 8,\n    }}>\n        {[...Array(10)].map((_, y) =>\n            <div className=\"row\">\n                {[...Array(10)].map((_, x) =>\n                    <MailBox\n                        value={props.mailBoxValues[y * 10 + x]}\n                        index={y * 10 + x}\n                        active={props.pc === (y * 10 + x)}\n                        setMailBox={props.setMailBox}\n                    />\n                )}\n            </div>\n        )}\n        <div className=\"hud\">\n            <div className=\"acc\">\n                Accumulator: <MailBox\n                    value={props.accumulator}\n                    setDialogueOpen={setAccOpen}\n                    dialogue={\n                        <MiscValueDialogue\n                            setValue={props.setAccumulator}\n                            open={accOpen}\n                            setOpen={setAccOpen}\n                            name=\"Accumulator\"\n                        />\n                    }\n                />\n            </div>\n            <div className=\"pc\">\n                Program Counter: <MailBox\n                    value={props.pc}\n                    setDialogueOpen={setAccOpen}\n                    hideSign\n                    pad={2}\n                    dialogue={\n                        <MiscValueDialogue\n                            setValue={props.setPC}\n                            open={accOpen}\n                            setOpen={setAccOpen}\n                            name=\"Program Counter\"\n                        />\n                    }\n                />\n            </div>\n            <div className=\"ir\">\n                Instruction Register: <MailBox\n                    value={Math.trunc(props.mailBoxValues[props.pc] / 100)}\n                    hideSign\n                    noDialogue\n                    pad={1}\n                />\n            </div>\n            <div className=\"ar\">\n                Address Register: <MailBox\n                    value={props.mailBoxValues[props.pc] % 100}\n                    hideSign\n                    noDialogue\n                    pad={2}\n                />\n            </div>\n            <div className=\"input-field\">\n                <TextField\n                    variant=\"filled\"\n                    fullWidth\n                    type=\"number\"\n                    label=\"Input value\"\n                    disabled={!props.inputActive}\n                    error={detailedErrorText ? true : error}\n                    helperText={\n                        detailedErrorText ? detailedErrorText : \"Must be an integer from -999 to 999\"\n                    }\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        let newAcc = event.target.valueAsNumber;\n                        if (isNaN(newAcc) || newAcc % 1 !== 0) {\n                            setDetailedErrorText(\"Must be an integer\");\n                            return;\n                        } else {\n                            setDetailedErrorText('');\n                        }\n                        if (newAcc < -999 || newAcc > 999) {\n                            setError(true);\n                            return;\n                        } else {\n                            setError(false);\n                        }\n                        setNewAcc(newAcc);\n                    }}\n                    onKeyPress={(ev: React.KeyboardEvent<HTMLDivElement>) => {\n                        if (ev.key === 'Enter') {\n                            if (!error) {\n                                console.log('setting:', newAcc);\n                                props.setAccumulator(newAcc);\n                                props.doneAwaiting();\n                            }\n                            ev.preventDefault();\n                        }\n                    }}\n                >\n                </TextField>\n            </div>\n        </div>\n        <CardActions>\n            <Button\n                variant=\"text\"\n                color=\"primary\"\n                onClick={props.step}\n                disabled={props.running}\n            >Step</Button>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => props.setRunning(!props.running)}\n            >{props.running ? \"Stop\" : \"Run\"}</Button>\n\n            <FormControlLabel\n                style={{ marginRight: 0 }}\n                control={<Switch\n                    color=\"primary\"\n                    checked={props.instant}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        props.setInstant(event.target.checked);\n                    }}\n                />}\n                label=\"Run code as fast as possible\"\n            />\n        </CardActions>\n    </Card>\n}\n\nexport default PostOffice;\n","import { Button, Card, CardActions, CardContent, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport theme from '../dark';\nimport './App.scss';\nimport CodePanel from './CodePanel';\nimport PostOffice from './PostOffice';\n\nfunction divmod(x: number, y: number) {\n    var div = Math.trunc(x / y);\n    var rem = x % y;\n    return [div, rem];\n}\ndeclare global {\n    interface Window {\n        awaitingInput: boolean,\n        pc: number,\n        mailBoxes: number[],\n        acc: number,\n        output: string,\n        instant: boolean,\n        running: boolean,\n        timeoutID: number | undefined,\n    }\n}\n\nfunction App() {\n    let initialMailBoxes = [];\n    for (var i = 0; i < 100; i++) {\n        initialMailBoxes.push(0);\n    }\n    const [mailBoxes, setMailBoxes] = React.useState(initialMailBoxes);\n    window.mailBoxes = mailBoxes;\n    const [running, setRunningImpl] = React.useState(false);\n    window.running = running;\n    const [acc, setAcc] = React.useState(0)\n    window.acc = acc;\n    const [output, setOutput] = React.useState('');\n    window.output = output;\n    const [awaitingInput, setAwaitingInput] = React.useState(false);\n    window.awaitingInput = awaitingInput;\n    const [instant, setInstantImpl] = React.useState(false);\n    window.instant = instant;\n    function setMailBox(mailbox: number, value: number) {\n        let newMailBoxes = [...mailBoxes];\n        newMailBoxes[mailbox] = value;\n        setMailBoxes(newMailBoxes);\n    }\n    const [pc, setPC] = React.useState(0);\n    window.pc = pc;\n    function step() {\n        if (window.awaitingInput) {\n            return;\n        }\n        if (!window.running) {\n            window.clearInterval(window.timeoutID);\n            return;\n        }\n        let instruction = window.mailBoxes[window.pc];\n        console.log('stepping:', instruction);\n        if (window.pc < 99) {\n            window.pc++;\n            setPC(window.pc);\n        }\n        if (instruction < 0) {\n            setOutput(\n                output\n                + '\\nError: Attempted to execute an invalid opcode\\n'\n            );\n            setRunning(false);\n            return;\n        }\n        let [opc, arg] = divmod(instruction, 100);\n        switch (opc) {\n            case 0:\n                setRunning(false);\n                return;\n            case 1:\n                window.acc = window.acc + window.mailBoxes[arg];\n                setAcc(window.acc);\n                break;\n            case 2:\n                window.acc = window.acc - window.mailBoxes[arg];\n                setAcc(window.acc);\n                break;\n            case 3:\n                window.mailBoxes[arg] = window.acc;\n                break;\n            case 5:\n                window.acc = window.mailBoxes[arg];\n                setAcc(window.mailBoxes[arg]);\n                break;\n            case 6:\n                window.pc = arg;\n                setPC(arg);\n                break;\n            case 7:\n                if (window.acc === 0) {\n                    window.pc = arg;\n                    setPC(arg);\n                }\n                break;\n            case 8:\n                if (window.acc >= 0) {\n                    window.pc = arg;\n                    setPC(arg);\n                }\n                break;\n            case 9:\n                switch (arg) {\n                    case 1:\n                        window.awaitingInput = true;\n                        setAwaitingInput(true);\n                        break;\n                    case 2:\n                        setOutput(window.output + window.acc.toString() + '\\n');\n                        break;\n                    case 22:\n                        setOutput(window.output + String.fromCharCode(window.acc));\n                        break;\n                    default:\n                        setOutput(\n                            window.output\n                            + '\\nError: Attempted to execute an invalid opcode\\n'\n                        );\n                        setRunning(false);\n                }\n                break;\n            default:\n                setOutput(\n                    window.output\n                    + '\\nError: Attempted to execute an invalid opcode\\n'\n                );\n                setRunning(false);\n        }\n    }\n    function setInstant(value: boolean) {\n        window.instant = value;\n        setInstantImpl(value);\n        if (window.timeoutID) {\n            window.clearInterval(window.timeoutID);\n            window.timeoutID = window.setInterval(step, window.instant ? 0 : 2000);\n        }\n    }\n    function setRunning(value: boolean) {\n        window.running = value;\n        setRunningImpl(value);\n        if (window.timeoutID) {\n            window.clearInterval(window.timeoutID);\n            window.timeoutID = undefined;\n        }\n        if (value) {\n            // if (instant) {\n            //     step();\n            // } else {\n            //     window.timeoutID = window.setInterval(step, 500);\n            // }\n            window.timeoutID = window.setInterval(step, window.instant ? 0 : 2000);\n        }\n    }\n    function doneAwaiting() {\n        window.awaitingInput = false;\n        setAwaitingInput(false);\n    }\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className=\"row\" style={{\n                alignItems: 'flex-start'\n            }}>\n                <CodePanel\n                    disabled={running}\n                    setMailBoxes={setMailBoxes}\n                    setAccumulator={setAcc}\n                    setPC={setPC}\n                />\n                <Card style={{ marginTop: 8, width: 300 }}>\n                    <CardContent>\n                        Output:\n                        <div className=\"output\">\n                            {output}\n                        </div>\n                    </CardContent>\n                    <CardActions>\n                        <Button onClick={() => setOutput('')}>\n                            Clear output\n                        </Button>\n                    </CardActions>\n                </Card>\n                <PostOffice\n                    mailBoxValues={mailBoxes}\n                    accumulator={acc}\n                    inputActive={window.awaitingInput}\n                    setAccumulator={setAcc}\n                    doneAwaiting={doneAwaiting}\n                    running={running}\n                    setRunning={setRunning}\n                    instant={instant}\n                    setInstant={setInstant}\n                    setMailBox={setMailBox}\n                    step={step}\n                    setPC={setPC}\n                    pc={pc}\n                />\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}